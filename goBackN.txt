---------------------------------
Note:  Each count % 4 == 0, I will mark the packet to drop.

Question 1:
In a Go-Back-N protocol with a window size of 5 and every 4th packet dropped, we can calculate the total number of packets transmitted by Host A to successfully transmit all 10 packets to Host B. 

In the Go-Back-N protocol, when a packet is dropped, all packets from that point onwards in the window need to be retransmitted.

1. Host A starts by sending packets 1 to 5, where packet 4 is to be dropped.
2. Host B receives and acknowledges Packet 1, 2, 3 and Host A sends 6, 7, 8 respectively one by one and packet 8 is to be dropped.
3. Host B did not receive packet 4 because it is dropped, Now, Host A will send whole window again (packets 4 to 8), here packet 7 is to be dropped because it is the 12th packet sent by Host A which is the next 4th packet.
4. Host B receives and acknowledges Packet 4, 5 and Host A sends 9, 10. Now current window is [6, 7, 8, 9, 10].
5. Host B receive and acknowledges packet 6. 
6. Till Now total packets transferred are 15.
7. Now, Host B did not receives the packet 7 because it is dropped, Now Host A will again send packets from 7 to 10. Here packet number 7 is the 16th transmitted packet which is also next 4th packet so it is again marked to be dropped.
8. Again Host A will send packets from 7 to 10, and Packet Number 7 is the 20th transmitted packet, in this way each time the 7th packet is going to be the multiple of 4 will indicates that Go Back N will continue till infinite.


Iteration for the same:

-> count =  5, send = 5,   drop = 4th,     (every 4th packet dropped send by host A)
-> count =  6, sent = 6,    drop = 4th,       
-> count =  7, sent = 7,    drop = 4th,       
-> count =  8, sent = 8,    drop = 4th, 8th,   (count = 8 == 8th packet)
-> count = 13, sent = [4,5,6,7,8]   drop = 7th, 8th,  (send the window again and count = 12 == 7th packet)
-> count = 14, sent = 9,    drop = 7th, 8th, 
-> count = 15, sent = 10,  drop = 7th, 8th,  
-> count = 15, sent = 0,     drop = 7th, 8th,   
-> count = 19, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 16 == 7th packet)
-> count = 23, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 20 == 7th packet)

hence it will drop the 7th packet infinite times.



Question 2:

Selective Repeat allows for the selective retransmission of only the lost or corrupted packets.

1. Host A sends 1 to 5 packets. 4th packet is to be dropped. (5 packets)
2. Host B receives and acknowledges 1,2,3 packets and Host A sends 6, 7, 8 packets respectively, and 8th packet is to be dropped. (5+3 packets= 8)
3. Host B did not receives packet No. 4, so Host A will only send the 4th packet again. (8+1 Packet)
4. Host B receives and acknowledges packet 4, 5 and Host A sends packet 9, 10. (9+2 Packets)
5. Host B receives 6 and 7 successfully but as we know 8th packet is lost, so Host A will again send 8th packet then counter for 8th packet is 12 so it will drop (11+1 packet)
6. Now Host be did not receive packet 8 that's why Host A will again send 8th packet. (12+1 packet)
7. Now the total number of packets send are 13, so now Host B will successfully acknowledge Packet 8, 9, 10.

Total Packets transmitted by Host A are (5+3+1+2+1+1 = 13).



first send 5 packets so send = 5 and count = 5, 

-> Ack = 0, count =  5, send = 5,   drop = 4,     
-> Ack = 1, count =  6, sent = 6,   drop = 4,     
-> Ack = 2, count =  7, sent = 7,   drop = 4,       
-> Ack = 3, count =  8, sent = 8,   drop = 4, 8,    
-> Ack = 0, count =  9, sent = [4]  drop = 8,     (send 4th again)
-> Ack = 4, count = 10, sent = 9,   drop = 8,       
-> Ack = 5, count = 11, sent = 10,  drop = 8,     
-> Ack = 6, count = 11, sent = 0,   drop = 8,       
-> Ack = 7, count = 11, sent = 0,   drop = 8,       
-> Ack = 0, count = 12, sent = [8], drop = 8,     (send 8th again)
-> Ack = 0, count = 13, sent = [8], drop = 8,     (send 8th again)
-> Ack = 8, count = 13, sent = 0,   drop = 0,         
-> Ack = 9, count = 13, sent = 0,   drop = 0,            
-> Ack = 10, count = 13, sent = 0   drop = 0,       
So Total Count = 13 which is ultimately the number of packets sent by Host A to Host B.


------------------------------------------------------------------------------------
-> count =  5, send = 5,   drop = 4th,     (every 4Th packet dropped send by host)
-> count =  6, sent = 6,    drop = 4th,       
-> count =  7, sent = 7,    drop = 4th,       
-> count =  8, sent = 8,    drop = 4th, 8th,   (count = 8 == 8th packet)
-> count = 13, sent = [4,5,6,7,8]   drop = 7th, 8th,  (send the window again and count = 12 == 7th packet)
-> count = 14, sent = 9,    drop = 7th, 8th, 
-> count = 15, sent = 10,  drop = 7th, 8th,  
-> count = 15, sent = 0,     drop = 7th, 8th,   
-> count = 19, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 16 == 7th packet)
-> count = 23, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 20 == 7th packet)

hence it will drop the 7th packet infinite times.
Question 2:

first send 5 packets so send = 5 and count = 5, 
-> count =  5, send = 5,   drop = 4,     
-> count =  6, sent = 6,   drop = 4,     
-> count =  7, sent = 7,   drop = 4,       
-> count =  8, sent = 8,   drop = 4, 8,    
-> count =  9, sent = [4]  drop = 8,     (send 4th again)
-> count = 10, sent = 9,   drop = 8,       
-> count = 11, sent = 10,  drop = 8,     
-> count = 11, sent = 0,   drop = 8,       
-> count = 11, sent = 0,   drop = 8,       
-> count = 12, sent = [8], drop = 8,     (send 8th again)
-> count = 13, sent = [8], drop = 8,     (send 8th again)
-> count = 13, sent = 0,   drop = 0,         
-> count = 13, sent = 0,   drop = 0,            
-> count = 13, sent = 0   drop = 0,       

So Total Count = 13 which is ultimately the number of packets sent by Host A to Host B.




------------------------------------------------------
Note:  Eack count % 4 == 0, I will mark the packet to drop.

Question 1:

first send 5 packets so send = 5 and count = 5,     
-> Ack = 0, count =  5, send = 5,            drop = 4th,     (count = 4 == 4th packet)
-> Ack = 1, count =  6, sent = 6,            drop = 4th,       
-> Ack = 2, count =  7, sent = 7,            drop = 4th,       
-> Ack = 3, count =  8, sent = 8,            drop = 4th, 8th,      
-> Ack = 0, count = 13, sent = [4,5,6,7,8]   drop = 7th, 8th,  (send the window again)
-> Ack = 4, count = 14, sent = 9,            drop = 7th, 8th,  
-> Ack = 5, count = 15, sent = 10,           drop = 7th, 8th,  
-> Ack = 6, count = 15, sent = 0,            drop = 7th, 8th,   
-> Ack = 0, count = 19, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 16 == 7th packet)
-> Ack = 0, count = 23, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 20 == 7th packet)

hence it will drop the 7th packet infinite times.
Question 2:

first send 5 packets so send = 5 and count = 5, 
-> Ack = 0, count =  5, send = 5,   drop = 4,     
-> Ack = 1, count =  6, sent = 6,   drop = 4,     
-> Ack = 2, count =  7, sent = 7,   drop = 4,       
-> Ack = 3, count =  8, sent = 8,   drop = 4, 8,    
-> Ack = 0, count =  9, sent = [4]  drop = 8,     (send 4th again)
-> Ack = 4, count = 10, sent = 9,   drop = 8,       
-> Ack = 5, count = 11, sent = 10,  drop = 8,     
-> Ack = 6, count = 11, sent = 0,   drop = 8,       
-> Ack = 7, count = 11, sent = 0,   drop = 8,       
-> Ack = 0, count = 12, sent = [8], drop = 8,     (send 8th again)
-> Ack = 0, count = 13, sent = [8], drop = 8,     (send 8th again)
-> Ack = 8, count = 13, sent = 0,   drop = 0,         
-> Ack = 9, count = 13, sent = 0,   drop = 0,            
-> Ack = 10, count = 13, sent = 0   drop = 0,       

So Total Count = 13 which is ultimately the number of packets sent by Host A to Host B.
















---------------------------------------------------------------------

Note:  Eack count % 4 == 0, I will mark the packet to drop.

Question 1:

first send 5 packets so send = 5 and count = 5,     
-> Ack = 0, count =  5, send = 5,            drop = 4th,       
-> Ack = 1, count =  6, sent = 6,            drop = 4th,       
-> Ack = 2, count =  7, sent = 7,            drop = 4th,       
-> Ack = 3, count =  8, sent = 8,            drop = 4th, 8th,      
-> Ack = 0, count = 13, sent = [4,5,6,7,8]   drop = 7th, 8th,  
-> Ack = 4, count = 14, sent = 9,            drop = 7th, 8th,  
-> Ack = 5, count = 15, sent = 10,           drop = 7th, 8th,  
-> Ack = 6, count = 15, sent = 0,            drop = 7th, 8th,   
-> Ack = 0, count = 19, sent = [7,8,9,10],   drop = 7th, 8th,  (16th == 7th packet)
-> Ack = 0, count = 23, sent = [7,8,9,10],   drop = 7th, 8th,  (20th == 7th packet)

hence it will drop the 7th packet infinite times.
Question 2:

first send 5 packets so send = 5 and count = 5, 
-> Ack = 0, count =  5, send = 5,   drop = 4,     window = [1, 2, 3, 4, 5]
-> Ack = 1, count =  6, sent = 6,   drop = 4,     window = [2, 3, 4, 5, 6]
-> Ack = 2, count =  7, sent = 7,   drop = 4,     window = [3, 4, 5, 6, 7]  
-> Ack = 3, count =  8, sent = 8,   drop = 4, 8,  window = [4, 5, 6, 7, 8]  
-> Ack = 0, count =  9, sent = [4]  drop = 8,     window = [4]             4th again
-> Ack = 4, count = 10, sent = 9,   drop = 8,     window = [5, 6, 7, 8, 9]  
-> Ack = 5, count = 11, sent = 10,  drop = 8,     window = [6, 7, 8, 9, 10] 
-> Ack = 6, count = 11, sent = 0,   drop = 8,     window = [7, 8, 9, 10]    
-> Ack = 7, count = 11, sent = 0,   drop = 8,     window = [8, 9, 10],      
-> Ack = 0, count = 12, sent = [8], drop = 8,     window = [8, 9, 10],    8th again
-> Ack = 0, count = 13, sent = [8], drop = 8,     window = [8, 9, 10],    8th again
-> Ack = 8, count = 13, sent = 0,   drop = 0,     window = [9, 10],           
-> Ack = 9, count = 13, sent = 0,   drop = 0,     window = [10],                 
-> Ack = 10, count = 13, sent = 0   drop = 0,     window = [],              

So Total Count = 13 which is ultimately the number of packets sent by Host A to Host B.


---------------------------------------------------------------------
Question 1: 

-> Ack = 0, count =  1, send = 1,                drop = 0,         window = [1]
-> Ack = 0, count =  2, send = 2,                drop = 0,         window = [1, 2]
-> Ack = 0, count =  3, send = 3,                drop = 0,         window = [1, 2, 3]
-> Ack = 0, count =  4, send = 4,                drop = 4th,       window = [1, 2, 3, 4]
-> Ack = 0, count =  5, send = 5,                drop = 4th,       window = [1, 2, 3, 4, 5]
-> Ack = 1, count =  6, sent = 6,                drop = 4th,       window = [2, 3, 4, 5, 6]
-> Ack = 2, count =  7, sent = 7,                drop = 4th,       window = [3, 4, 5, 6, 7]
-> Ack = 3, count =  8, sent = 8,                drop = 4th, 8th,  window = [4, 5, 6, 7, 8]
-> Ack = 0, count =  9, sent = [4]               drop = 8th,       window = [4]             4th again
-> Ack = 0, count = 10, sent = [4, 5]            drop = 8th,       window = [4, 5]          5th again
-> Ack = 0, count = 11, sent = [4, 5, 6]         drop = 8th,       window = [4, 5, 6]       6th again
-> Ack = 0, count = 12, sent = [4, 5, 6, 7]      drop = 8th,       window = [4, 5, 6, 7]    7th again
-> Ack = 0, count = 13, sent = [4, 5, 6, 7, 8]   drop = 7th, 8th,  window = [4, 5, 6, 7, 8] 8th again
-> Ack = 4, count = 14, sent = 9,                drop = 7th, 8th,  window = [5, 6, 7, 8, 9]
-> Ack = 5, count = 15, sent = 10,               drop = 7th, 8th,  window = [6, 7, 8, 9, 10]
-> Ack = 6, count = 15, sent = 0,                drop = 7th, 8th,  window = [7, 8, 9, 10]
-> Ack = 0, count = 16, sent = [7],              drop = 7th, 8th,  window = [7],           7th again
-> Ack = 0, count = 17, sent = [7, 8],           drop = 7th, 8th,  window = [7, 8],        8th again
-> Ack = 0, count = 18, sent = [7, 8, 9],        drop = 7th, 8th,  window = [7, 8, 9],     9th again
-> Ack = 0, count = 19, sent = [7, 8, 9, 10],    drop = 7th, 8th,  window = [7, 8, 9, 10], 10th again
-> Ack = 0, count = 20, sent = [7],              drop = 7th, 8th,  window = [7],           7th again
-> Ack = 0, count = 21, sent = [7, 8],           drop = 7th, 8th,  window = [7, 8],        8th again
-> Ack = 0, count = 22, sent = [7, 8, 9],        drop = 7th, 8th,  window = [7, 8, 9],     9th again
-> Ack = 0, count = 23, sent = [7, 8, 9, 10],    drop = 7th, 8th,  window = [7, 8, 9, 10], 10th again 

hence it will drop the 7th packet infinite times.


Question 2:

-> Ack = 0, count =  1, send = 1,   drop = 0,         window = [1]
-> Ack = 0, count =  2, send = 2,   drop = 0,         window = [1, 2]
-> Ack = 0, count =  3, send = 3,   drop = 0,         window = [1, 2, 3]
-> Ack = 0, count =  4, send = 4,   drop = 4th,       window = [1, 2, 3, 4]
-> Ack = 0, count =  5, send = 5,   drop = 4th,       window = [1, 2, 3, 4, 5]
-> Ack = 1, count =  6, sent = 6,   drop = 4th,       window = [2, 3, 4, 5, 6]
-> Ack = 2, count =  7, sent = 7,   drop = 4th,       window = [3, 4, 5, 6, 7]
-> Ack = 3, count =  8, sent = 8,   drop = 4th, 8th,  window = [4, 5, 6, 7, 8]
-> Ack = 0, count =  9, sent = [4]  drop = 8th,       window = [4]             4th again
-> Ack = 4, count = 10, sent = 9,   drop = 8th,       window = [5, 6, 7, 8, 9]
-> Ack = 5, count = 11, sent = 10,  drop = 8th,       window = [6, 7, 8, 9, 10]
-> Ack = 6, count = 11, sent = 0,   drop = 8th,       window = [7, 8, 9, 10]
-> Ack = 7, count = 11, sent = 0,   drop = 8th,       window = [8, 9, 10], 
-> Ack = 0, count = 12, sent = [8], drop = 8th,       window = [8, 9, 10],    8th again
-> Ack = 0, count = 13, sent = [8], drop = 8th,       window = [8, 9, 10],    8th again
-> Ack = 8, count = 13, sent = 0,   drop = 0,         window = [9, 10],      
-> Ack = 9, count = 13, sent = 0,   drop = 0,         window = [10],           
-> Ack = 10, count = 13, sent = 0   drop = 0,         window = [], 

So Total Count = 13 which is ultimately the number of packets sent by Host A to Host B.



























Note: For each count % 4 == 0, I will mark the Packet to drop. for example: 4, 8, 12 and so..on.

Question 1:

In the Go-Back-N protocol, when a packet is dropped, all packets in the window need to be retransmitted from that point onwards.

1. Host A starts by sending packets 1 to 5, where packet 4 is to be dropped.
2. Host B receives and acknowledges Packets 1, 2, 3, and Host A sends Packets 6, 7, and 8, respectively, one by one. Here Packet 8 is to be dropped because counter value is 8.
3. Host B did not receive packet 4 because it is dropped. Now, Host A will send the whole window again (packets 4 to 8).    Here packet 7 is to be dropped because it is the 12th Packet sent by Host A, which is the next 4th Packet.
4. Host B receives and acknowledges Packets 4 and 5, and Host A sends Packets 9 and 10. Now the current window is [6, 7, 8, 9, 10].
5. Host B receives and acknowledges packet 6 and Host A is left with nothing else in the queue. 
6. Till Now, the total packets transferred is 15.
7. Host B did not receive packet 7 because it is dropped (point 3). Now, Host A will again send packets from 7 to 10. Here, packet number 7 is the 16th transmitted Packet, which is also the next 4th Packet, so it is again marked to be dropped.
8. Again, Host A will send packets from 7 to 10, and Packet Number 7 is the 20th transmitted Packet. In this way, each time the 7th Packet is going to be the multiple of 4 which indicates that Go Back N will continue till infinite.

9. Hence, This Protocol will transmit infinite Packets.

Iteration for the same:
- first 5 packets are sent so the count is 5 and send = 5 till now drop have 4th packet.
- Ack = 0, count = 5, send = 5, drop = 4th, (every 4th packet dropped send by host A)
- Ack = 1, count = 6, sent = 6,   drop = 4th,       
- Ack = 2, count =  7, sent = 7,    drop = 4th,       
- Ack = 3, count =  8, sent = 8,    drop = 4th, 8th,   (count = 8 == 8th packet)
- Ack = 0, count = 13, sent = [4,5,6,7,8]   drop = 7th, 8th,  (send the window again so count = 8+5 = 13 and count is 12 for 7th packet so it is added in drop list)
- Ack = 2, count = 14, sent = 9,    drop = 7th, 8th, 
- Ack = 3, count = 15, sent = 10,  drop = 7th, 8th,  
- Ack = 4, count = 15, sent = 0,     drop = 7th, 8th,   
- Ack = 0, count = 19, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 16 == 7th packet)
- Ack = 0, count = 23, sent = [7,8,9,10],   drop = 7th, 8th,  (count = 20 == 7th packet)

hence it will drop the 7th Packet infinite times.



Question 2:

Selective Repeat allows for the selective retransmission of only the lost or corrupted packets.

1. Host A sends 1 to 5 packets. 4th Packet is to be dropped. (5 packets)
2. Host B receives and acknowledges 1,2,3 packets, and Host A sends 6, 7, and 8 packets respectively, and the 8th Packet is to be dropped. (5+3 packets= 8)
3. Host B did not receive packet No. 4, so Host A will only send the 4th Packet again. (8+1 Packet)
4. Host B receives and acknowledges packets 4, 5 and Host A sends packets 9, 10. (9+2 Packets)
5. Host B receives 6 and 7 successfully but as we know 8th Packet is lost, so Host A will again send 8th Packet. Then counter for the 8th Packet is 12, so it will drop (11+1 Packet)
6. Now, Host B did not receive packet 8, so Host A will send the 8th Packet again. (12+1 Packet)
7. The total number of packets sent is 13, so now Host B will successfully acknowledge packets 8, 9, and 10.

Total Packets transmitted by Host A are (5+3+1+2+1+1 = 13).



first send 5 packets so send = 5 and count = 5, 

- Ack = 0, count =  5, send = 5,   drop = 4,     
- Ack = 1, count =  6, sent = 6,   drop = 4,     
- Ack = 2, count =  7, sent = 7,   drop = 4,       
- Ack = 3, count =  8, sent = 8,   drop = 4, 8,    
- Ack = 0, count =  9, sent = [4]  drop = 8,     (send 4th again)
- Ack = 4, count = 10, sent = 9,   drop = 8,       
- Ack = 5, count = 11, sent = 10,  drop = 8,     
- Ack = 6, count = 11, sent = 0,   drop = 8,       
- Ack = 7, count = 11, sent = 0,   drop = 8,       
- Ack = 0, count = 12, sent = [8], drop = 8,     (send 8th again)
- Ack = 0, count = 13, sent = [8], drop = 8,     (send 8th again)
- Ack = 8, count = 13, sent = 0,   drop = 0,         
- Ack = 9, count = 13, sent = 0,   drop = 0,            
- Ack = 10, count = 13, sent = 0   drop = 0,       
So Total Count = 13, ultimately the number of packets sent by Host A to Host B.